
BUFFER HOOKS

 Buffer hooks are hooks defined in the buffer system, (buffer/buffer.c ...)

 They are all called with at least one argument. This argument is a pointer to
 the buffer that is being referenced by the hook.

 BUFFER ON CREATE HOOK

 |buffer_on_create
 | (buffer *b)
 |
 | This hook is called when a new buffer is created. The single argument is a
 | pointer to the new buffer.
 |
 | The buffer will be empty, and default values for all flags.

 BUFFER ON DELETE HOOK

 |buffer_on_delete
 | (buffer *b)
 |
 | This hook is called before when a buffer is deleted. The single argument is
 | the buffer that will be deleted.


 BUFFER LINE HOOKS

  All buffer line hooks are called with at least two arguments. The second is a
  pointer to a lineno integer, containing the linenumber of the line the hook is
  being called with reference to.

  The _LOCKED property of the buffer is set to TRUE before calling any of these
  hooks. While it remains TRUE, it prevents any modifying operations on the
  buffer by functions called by functions mounted to the hook. This is because
  functions that do this have undefined behaviour.

  Using the chunk or line api to change the contents of a buffer will not call
  these hooks, and so is strongly discouraged.

  All buffer_line_*_pre hooks are called even when the readonly flag on the
  buffer is enabled, and the corresponding operation will not be performed.

  If the readonly flag is enabled by a function mounted on a buffer line hook,
  then the corresponding operation will not take place. This allows for mounted
  functions to abort operations.

  All buffer_line_*_post hooks are only called if the corresponding operation
  was performed sucessfully. This means that they may not necessarily be called
  after a corresponding buffer_line_*_pre hook.

  BUFFER LINE ON CHANGE HOOKS

  |buffer_line_on_change_pre
  |buffer_line_on_change_post
  | (buffer *b, const lineno *ln, vec *v)
  |
  | The buffer_line_on_change pair of hooks are called whenever the content of a
  | line in a buffer is changed by buffer_set_line.
  |
  | A third parameter is passed to these functions. It is a vec containing the
  | new contents of the line.
  |
  | The buffer_line_on_change_pre hook is called before the content is actually
  | changed. This allows functions using the _pre hook to view the current
  | contents of the line using buffer_get_line(b, *ln).
  |
  | Functions using the _pre hook also have the ability to change the contents
  | of v, which will change what the contents of the line is set to. This can be
  | useful, for example, to remove a certain type of character (such as '\n')
  | from buffers that should not be there.
  |
  | Changing the contents of v in the _post hook will simply change it for
  | subsequently called, less prioritized mounted functions.

  BUFFER LINE ON DELETE HOOKS

  |buffer_line_on_delete_post
  |buffer_line_on_delete_pre
  | (buffer *b, const size_t *ln)
  |
  | The buffer_line_on_delete pair of hooks are called whenever a line is
  | deleted from a buffer by buffer_delete.
  |
  | Note that for the _post function, *ln will no longer be the linenumber of
  | the line being deleted. It will either be the line after the line that was
  | deleted, or one more than the length of the buffer.

  BUFFER LINE ON INSERT HOOKS

  |buffer_line_on_insert_post
  |buffer_line_on_insert_pre
  | (buffer *b, size_t *ln)
  |
  | The buffer_line_on_insert pair of hooks are called whenevr a line is
  | inserted into a buffer by buffer_insert.
  |
  | Note that for the _pre function, there is not yet a new line. *ln the
  | linenumber where the new line will be inserted.

IO HOOKS
 IO KEY HOOKS
  IO KEY ON KEY HOOK
  |io_key_on_key
  | (key *k)
  |
  | This hook is called by io_key_handle_completed is called. This is whenever
  | the io_key system recieves a full keypress through io_key_handle_chr. A
  | complete keypress is a keypress terminated by a non-modifier key, such as
  | ^A, a, DOWN, E-DOWN, E-^A.
  |
  | This hook is called with a single argument - a key object representing the
  | keystroke.
  |
  | This hook provides lower level access to keypresses than keymaps, which
  | should be used for most things.
  |
  | *key can be modified, changing its value for subsequently called, lower
  | priority functions mounted on this hook. This could be used to fix key names
  | or attributes being incorrectly reported.

UI HOOKS

 ui hooks are defined in the ui system (ui/*).

 UI ON RESIZE HOOK
 |ui_on_resize_pre
 |ui_on_resize_post
 | (const unsigned int *x, const unsigned int *y)
 |
 | These hooks are called whenever ui_resize is called.
 |
 | x and y are the new dimensions of the screen in numbers of characters.
 |
 | The _pre hook is called before the root window is resized to the new screen
 | size, while the _post hook is called after resizing the root window and
 | redrawing the screen.

 UI WIN HOOKS
  UI WIN CONTENT HOOKS
   UI WIN CONTENT ON DRAW LINE HOOKS
   |ui_win_content_on_draw_line_post
   |ui_win_content_on_draw_line_pre
   UI WIN CONTENT ON DRAW HOOKS
   |ui_win_content_on_draw_post
   |ui_win_content_on_draw_pre
  UI WIN FRAME HOOKS
   UI WIN FRAME ON DRAW HOOKS
   |ui_win_frame_on_draw_post
   |ui_win_frame_on_draw_pre

WIN HOOKS
 |win_on_create
 |win_on_delete_post
 |win_on_delete_pre
 |win_on_resize_x
 |win_on_resize_y
 |win_on_select
 |win_on_split
